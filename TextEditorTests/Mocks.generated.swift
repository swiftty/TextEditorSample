///
/// @Generated by Mockolo
///

import Combine
import Photos
import PhotosUI
import SwiftUI
@testable import TextEditor
import UIKit
import UniformTypeIdentifiers

public class TextEditorTextViewDelegateMock: TextEditorTextViewDelegate {
    public init() {}

    public private(set) var textViewAddCallCount = 0
    public var textViewAddArgValues = [TextEditorTextView]()
    public var textViewAddHandler: ((TextEditorTextView) -> Void)?
    public func textViewAdd(_ textView: TextEditorTextView) {
        textViewAddCallCount += 1
        textViewAddArgValues.append(textView)
        if let textViewAddHandler = textViewAddHandler {
            textViewAddHandler(textView)
        }
    }

    public private(set) var textViewJoinIfNeededCallCount = 0
    public var textViewJoinIfNeededArgValues = [TextEditorTextView]()
    public var textViewJoinIfNeededHandler: ((TextEditorTextView) -> Void)?
    public func textViewJoinIfNeeded(_ textView: TextEditorTextView) {
        textViewJoinIfNeededCallCount += 1
        textViewJoinIfNeededArgValues.append(textView)
        if let textViewJoinIfNeededHandler = textViewJoinIfNeededHandler {
            textViewJoinIfNeededHandler(textView)
        }
    }

    public private(set) var textViewDeleteIfNeededCallCount = 0
    public var textViewDeleteIfNeededArgValues = [TextEditorTextView]()
    public var textViewDeleteIfNeededHandler: ((TextEditorTextView) -> Void)?
    public func textViewDeleteIfNeeded(_ textView: TextEditorTextView) {
        textViewDeleteIfNeededCallCount += 1
        textViewDeleteIfNeededArgValues.append(textView)
        if let textViewDeleteIfNeededHandler = textViewDeleteIfNeededHandler {
            textViewDeleteIfNeededHandler(textView)
        }
    }

    public private(set) var textViewCallCount = 0
    public var textViewArgValues = [(TextEditorTextView, NSRange)]()
    public var textViewHandler: ((TextEditorTextView, NSRange) -> Void)?
    public func textView(_ textView: TextEditorTextView, separateAt range: NSRange) {
        textViewCallCount += 1
        textViewArgValues.append((textView, range))
        if let textViewHandler = textViewHandler {
            textViewHandler(textView, range)
        }
    }
}

public class TextEditorCoverViewDelegateMock: TextEditorCoverViewDelegate {
    public init() {}

    public private(set) var coverViewDidTapPickImageCallCount = 0
    public var coverViewDidTapPickImageArgValues = [TextEditorCoverView]()
    public var coverViewDidTapPickImageHandler: ((TextEditorCoverView) -> Void)?
    public func coverViewDidTapPickImage(_ coverView: TextEditorCoverView) {
        coverViewDidTapPickImageCallCount += 1
        coverViewDidTapPickImageArgValues.append(coverView)
        if let coverViewDidTapPickImageHandler = coverViewDidTapPickImageHandler {
            coverViewDidTapPickImageHandler(coverView)
        }
    }

    public private(set) var coverViewDidTapEditCallCount = 0
    public var coverViewDidTapEditArgValues = [TextEditorCoverView]()
    public var coverViewDidTapEditHandler: ((TextEditorCoverView) -> Void)?
    public func coverViewDidTapEdit(_ coverView: TextEditorCoverView) {
        coverViewDidTapEditCallCount += 1
        coverViewDidTapEditArgValues.append(coverView)
        if let coverViewDidTapEditHandler = coverViewDidTapEditHandler {
            coverViewDidTapEditHandler(coverView)
        }
    }

    public private(set) var coverViewDidTapDeleteCallCount = 0
    public var coverViewDidTapDeleteArgValues = [TextEditorCoverView]()
    public var coverViewDidTapDeleteHandler: ((TextEditorCoverView) -> Void)?
    public func coverViewDidTapDelete(_ coverView: TextEditorCoverView) {
        coverViewDidTapDeleteCallCount += 1
        coverViewDidTapDeleteArgValues.append(coverView)
        if let coverViewDidTapDeleteHandler = coverViewDidTapDeleteHandler {
            coverViewDidTapDeleteHandler(coverView)
        }
    }
}
